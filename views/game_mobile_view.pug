
html
    head
        
        //- Importing Ubuntu from Google Fonts
        link(href = 'https://fonts.googleapis.com/css?family=Ubuntu', rel = 'stylesheet')
        
        style
            //- Importing my own CSS file
            include ../static/style.css
            
        - var letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];

        script().

            // Assigns the gameID passed to the Pug view to a JS variable
            let gameID = #{gameID};

            // Converts the 2D grid passed to the view into a 1D array
            // (this is because of the way Pug handles interpolation, it
            // was significantly easier to simply convert to a 1D array
            // than parse it into a 2D array)
            let grid = [!{grid.map(row => row.map(cell => '"' + cell.toString() + '"'))}];

            // Initialising the current square
            let currentSquare;

            // Initialising the contents of the current square
            let currentSquareContents;

            // Initialising an object to convert from letters to numbers
            // for the grid indices
            let letterIndices = {
                A: 0,
                B: 1,
                C: 2,
                D: 3,
                E: 4,
                F: 5,
                G: 6,
            }

            // An AJAX function that updates currentSquare and currentSquareContents
            function checkGrid(gameID) {

                // Initialises the xhttp library
                var xhttp = new XMLHttpRequest();

                // Called when the ready state of the request changes
                xhttp.onreadystatechange = function() {

                    // Checks that the request is complete
                    if (this.readyState == 4 && this.status == 200) {

                        // Converts the retrieved JSON string to a JS object
                        let gameData = JSON.parse(this.responseText);

                        // Retrieving the current square from the JSON
                        currentSquare = gameData.currentSquare;

                        // Displaying the current square on the HTML page
                        document.getElementById("current_square_box").innerHTML = currentSquare;

                        // Converting the first letter of the square to an index
                        let col = letterIndices[currentSquare.slice(0, 1)];

                        // Converting the second letter of the square to an index
                        let row = currentSquare.slice(1, 2) - 1;

                        // Converting the row and column indices into an index in
                        // the one-dimensional grid array
                        let index = row * 7 + col;

                        // Retrieving the contents of the current square
                        currentSquareContents = grid[index];

                        // Displaying the contents of the current square
                        // on the HTML page
                        document.getElementById("current_square_contents_box").innerHTML = currentSquareContents;
                   };
                };

                // Opens the GET request for the JSON file
                xhttp.open("GET", "gameData" + gameID + ".json", true);

                // Sends the request
                xhttp.send();
            };

            // Calls checkGrid every two seconds
            setInterval(checkGrid, 2000, gameID);

    body
        table
            td
                table(class = 'player_grid')
                    //- Creating the top row of the grid and displaying each column's letter
                    tr
                        th 
                        
                        //- Iterates through the letters from A to G, and creates a header for each
                        each letter in letters
                            th= letter

                    //- Iterates through each row in the grid passed to the view
                    each row, index in grid

                        //- Creates a row for each row
                        tr(class = 'player_grid_row')

                            //- Creates a side heading for each row
                            th(class = 'player_grid_head')= index + 1

                            //- Iterated through each column
                            each cellType in row

                                //- Creates a cell for each column in the row
                                //- that contains the user's custom grid input
                                td(class = 'player_grid_cell')= cellType
            td
                h1 Current Square:
                p(id = 'current_square_box')
                h1 Current Square Contents:
                p(id = 'current_square_contents_box')
