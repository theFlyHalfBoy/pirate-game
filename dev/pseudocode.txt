// Server Loop

// Importing the Node module "express", which aids in writing webservers
import express

// Importing my own "JSONHandler" module, which contains 
// all the code for dealing with the JSON file
import JSONHandler

// Initialising an Express server called "app"
app = new express.Server()

// Defining which port the server will run on
port = 1337

// This main 'server loop' runs over and over again, allowing it to always
// know when a new request is made to one of its subdomains
while true

    // Retrieves any request made to the server on the predefined port, and
    // storing it in a variable called "req". The variable is null if no
    // unhandled request has been made
    req = app.listen(port)

    // Checking the type of the HTTP request
    switch req.httpType:

        // Handling all GET requests
        case "GET":

            // Checking the source of the request (subdomain/rendered view)
            switch req.source:

                // Handles all intial connections, rendering the home view
                case "/":
                    app.render("home_view.pug")

                // Handles users clicking the "Host" button on the home view:
                // initialises the JSON file and renders the inital host view
                case "/desktop/home_view":
                    JSONHandler.initialiseGame()
                    app.render("initial_host_view.pug")

                // Handles users clicking the "Play" button on the home view:
                // renders the initial player view (login page)
                case "/mobile/home_view":
                    app.render("initial_player_view")

                // Handles any unknown requests, simply printing
                // an error message to the console
                default:
                    print("Unrecognised request:", req.source)

            endswitch

        // Handling all POST requests
        case "POST":

            // Checking the source of the request (subdomain/rendered view)
            switch req.source:

                // Handles users clicking "Start Game" on the loading view:
                // renders the in-game host view
                case "/desktop/initial_host_view":
                    app.render("game_host_view")

                // Handles users choosing a square on the in-game host view:
                // re-renders the in-game host view, with the selected
                // square no longer available
                case "/desktop/game_host_view":
                    app.render("game_host_view")

                // Handles users clicking "Submit" on the intial player view:
                // adds the player's inputted form data to the JSON file as
                // a new object, and renders the grid input view
                case "/mobile/initial_player_view":
                    JSONHandler.addPlayer(req.body)
                    app.render("grid_player_view")

                // Handles users clicking "Submit" on the grid input view:
                // adds the player's inputted grid to their player object
                // in the JSON file, and renders the in-game player view
                case "/mobile/grid_player_view":
                    JSONHandler.updatePlayerGrid(req.body)
                    app.render("game_player_view")

                // Handles any unknown requests, simply printing
                // an error message to the console
                default:
                    print("Unrecognised request: " + req.source)

            endswitch

        // Handles any time the loop runs when no unhandled request
        // has been made: prints a simple message to the console
        default:
            print("No request made")

    endswitch

endwhile


// JSON Handler

// A procedure to initialise an instance of the game
procedure initialiseGame()
    
    // This function returns a new *unique* four-digit game ID
    id = generateID()

    // An object containing all the information about the game:
    // gameID is the ID generated by "generateID()"
    // players is an array of all the players in the game
    // grid is a 2D array of 0s and 1s, representing which squares have or
    // haven't been chosen
    gameData = {
        gameID: id,
        players: [],
        grid: [[0, 0, 0, 0, 0, 0, 0]
               [0, 0, 0, 0, 0, 0, 0]
               [0, 0, 0, 0, 0, 0, 0]
               [0, 0, 0, 0, 0, 0, 0]
               [0, 0, 0, 0, 0, 0, 0]
               [0, 0, 0, 0, 0, 0, 0]
               [0, 0, 0, 0, 0, 0, 0]]
    }

    // Opening the JSON file to be written to
    gameDataJSON = openWrite("gameData.json")

    // Converting the object to a JSON string using "objToJSON()", and then
    // writing that string to the JSON file
    gameDataJSON.writeLine(objToJSON(gameData))

    // Closing the file
    gameData.close()

endprocedure

// A procedure to add a player to the game
procedure addplayer(formData)

    // An object containing all the information about a single player:
    // name is the user-inputted name
    // group is the group the player belongs to (can be empty if no groups)
    // grid is a 2D array representing the contents of the player's grid
    // (initially all null, as the player hasn't inputted their grid yet)
    player = {
        name: formData.name
        group: formData.group
        grid: [[null, null, null, null, null, null, null]
               [null, null, null, null, null, null, null]
               [null, null, null, null, null, null, null]
               [null, null, null, null, null, null, null]
               [null, null, null, null, null, null, null]
               [null, null, null, null, null, null, null]
               [null, null, null, null, null, null, null]]
    }

    // Opening the JSON file to be written to
    gameDataJSON = openWrite("gameData.json")

    // Converting the JSON string in the file to an object using "JSONToObj"
    gameData = JSONToObj(gameDataJSON)

    // Appending the "player" object to the array of players in "gameData"
    gameData.players.push(player)

    // Converting the object to a JSON string using "objToJSON()", and then
    // writing that string to the JSON file
    gameDataJSON.writeLine(objToJSON(gameData))

    // Closing the file
    gameData.close()

endprocedure

// A procedure to update a player's grid
procedure updatePlayerGrid(formData)

    // Converts the grid from the player form to a 2D array
    grid = gridTo2DArray(formData.grid)

    // Opening the JSON file to be written to
    gameDataJSON = openWrite("gameData.json")

    // Converting the JSON string in the file to an object using "JSONToObj"
    gameData = JSONToObj(gameDataJSON)

    // Iterating though each player in the array
    for i = 0 to gameData.players.length

        // True if the name of the player matches the name from the form
        if gameData.players[i].name == formData.name then

            // Changes the grid currently in the object to the new 2D grid
            gameData.players[i].grid = grid

            // Halts the loop if the name is found to stop unnecessary searching
            break

        endif

    next i

    // Converting the object to a JSON string using "objToJSON()", and then
    // writing that string to the JSON file
    gameDataJSON.writeLine(objToJSON(gameData))

    // Closing the file
    gameData.close()

endprocedure